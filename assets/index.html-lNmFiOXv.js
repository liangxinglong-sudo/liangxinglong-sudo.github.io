import{_ as t,c as o,a as i,o as p}from"./app-noM96vtB.js";const n="/assets/es9-DhKWBw_x.png",a="/assets/es10-ChCR2wlR.png",r={};function l(s,e){return p(),o("div",null,e[0]||(e[0]=[i('<p>你要对一个很大的文件搜索其中是否有一个关键词，常规的做法是 <mark>遍历整个文档，那么如果关键词在文档最后，就会非常慢</mark></p><p><strong>倒排索引</strong> 先记录了每个关键词出现在了哪些文档里，需要哪个关键词，把含有的文档直接拎出来就可以，这样就快多了</p><blockquote><p>参考<a href="https://www.cnblogs.com/buchizicai/p/17093719.html" target="_blank" rel="noopener noreferrer">不吃紫菜</a></p></blockquote><h2 id="一、正排索引" tabindex="-1"><a class="header-anchor" href="#一、正排索引"><span>一、正排索引</span></a></h2><p><img src="'+n+'" alt="结构化表" width="909" height="321"></p><ul><li><p>优点</p><p>如果是根据id查询，那么直接走索引，查询速度非常快。</p></li><li><p>缺点</p><p>但如果是基于 title 做模糊查询，只能是逐行扫描数据，流程如下：</p><p>1）用户搜索数据，条件是 title 符合 &quot;<code>%手机%</code>&quot;</p><p>2）逐行获取数据，比如 id 为1的数据</p><p>3）判断数据中的 title 是否符合用户搜索条件</p><p>4）如果符合则放入结果集，不符合则丢弃。回到步骤1</p><p>逐行扫描，也就是全表扫描，随着数据量增加，其查询效率也会越来越低。当数据量达到数百万时，就是一场灾难。</p></li></ul><h2 id="二、倒排索引" tabindex="-1"><a class="header-anchor" href="#二、倒排索引"><span>二、倒排索引</span></a></h2><p><img src="'+a+'" alt="倒排索引" width="808" height="321"></p><p>使用倒排索引搜索步骤：</p><div class="vp-steps"><ol><li><p>用户输入条件&quot;<code>华为手机</code>&quot;进行搜索。</p></li><li><p>对用户输入内容分词，得到词条：<code>华为</code>、<code>手机</code>。</p></li><li><p>拿着词条在倒排索引中查找，可以得到包含词条的文档 id：1、2、3。</p></li><li><p>拿着文档 id 到正向索引中查找具体文档。</p></li></ol></div>',10)]))}const d=t(r,[["render",l]]),h=JSON.parse('{"path":"/knowledge/component/es/inverted-index/","title":"什么是倒排索引","lang":"zh-CN","frontmatter":{"title":"什么是倒排索引","icon":"oui:index-flush","category":["开发工具"],"tag":["es"],"createTime":"2025/04/30 10:28:06","permalink":"/knowledge/component/es/inverted-index/","description":"你要对一个很大的文件搜索其中是否有一个关键词，常规的做法是 遍历整个文档，那么如果关键词在文档最后，就会非常慢 倒排索引 先记录了每个关键词出现在了哪些文档里，需要哪个关键词，把含有的文档直接拎出来就可以，这样就快多了 参考不吃紫菜 一、正排索引 结构化表 优点 如果是根据id查询，那么直接走索引，查询速度非常快。 缺点 但如果是基于 title 做模...","head":[["meta",{"property":"og:url","content":"https://liangxinglong-sudo.github.io/knowledge/component/es/inverted-index/"}],["meta",{"property":"og:site_name","content":"coder liang"}],["meta",{"property":"og:title","content":"什么是倒排索引"}],["meta",{"property":"og:description","content":"你要对一个很大的文件搜索其中是否有一个关键词，常规的做法是 遍历整个文档，那么如果关键词在文档最后，就会非常慢 倒排索引 先记录了每个关键词出现在了哪些文档里，需要哪个关键词，把含有的文档直接拎出来就可以，这样就快多了 参考不吃紫菜 一、正排索引 结构化表 优点 如果是根据id查询，那么直接走索引，查询速度非常快。 缺点 但如果是基于 title 做模..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"es"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"什么是倒排索引\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":1.37,"words":411},"git":{},"autoDesc":true,"filePathRelative":"notes/knowledge/5.component/2.es/3.inverted-index.md"}');export{d as comp,h as data};
