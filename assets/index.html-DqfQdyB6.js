import{_ as i,c as a,a as n,o as e}from"./app-BN15cZ7s.js";const t={};function h(l,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="为什么会出现消息堆积" tabindex="-1"><a class="header-anchor" href="#为什么会出现消息堆积"><span>为什么会出现消息堆积？</span></a></h2><p>生产者的生产速度与消费者的速度不匹配。</p><h2 id="如何解决" tabindex="-1"><a class="header-anchor" href="#如何解决"><span>如何解决？</span></a></h2><p>先定位<strong>消费慢</strong>的原因，如果是bug则处理bug；如果是本身消费能力较弱，优化小消费逻辑，比如之前是一条一条消费处理的，优化为批量处理；水平扩容，增加<code>Topic</code>队列数和消费者数。<strong>注意队列数一定要增加</strong>，不然新增加的消费者是没东西消费的。<strong>一个Topic中，一个队列只会分配给一个消费者</strong>。</p><p>你是将接受到的消息写入内存队列之后，然后就返回响应给<code>Broker</code>，然后多线程向内存队列消费消息，假设此时消费者宕机之后内存队列里还未消费的消息也就丢了。</p><h2 id="rocketmq-解决消息堆积" tabindex="-1"><a class="header-anchor" href="#rocketmq-解决消息堆积"><span>RocketMq 解决消息堆积</span></a></h2><p>对于 RocketMQ，官方针对消息积压问题，提供了解决方案。</p><h3 id="_1-提高消费并行度" tabindex="-1"><a class="header-anchor" href="#_1-提高消费并行度"><span>1. 提高消费并行度</span></a></h3><p>绝大部分消息消费行为都属于 IO 密集型，即可能是操作数据库，或者调用 RPC，这类消费行为的消费速度在于后端数据库或者外系统的吞吐量，通过增加消费并行度，可以提高总的消费吞吐量，但是并行度增加到一定程度，反而会下降。所以，应用必须要设置合理的并行度。 如下有几种修改消费并行度的方法：</p><p>同一个 <code>ConsumerGroup</code> 下，通过增加 <code>Consumer</code> 实例数量来提高并行度（需要注意的是<strong>超过订阅队列数的 Consumer 实例无效</strong>）。可以通过加机器，或者在已有机器启动多个进程的方式。 提高单个 <code>Consumer</code> 的消费并行线程，通过修改参数 <code>consumeThreadMin</code>、<code>consumeThreadMax</code> 实现。</p><h3 id="_2-批量方式消费" tabindex="-1"><a class="header-anchor" href="#_2-批量方式消费"><span>2. 批量方式消费</span></a></h3><p>某些业务流程如果支持批量方式消费，则可以很大程度上提高消费吞吐量，例如订单扣款类应用，一次处理一个订单耗时 1 s，一次处理 10 个订单可能也只耗时 2 s，这样即可大幅度提高消费的吞吐量，通过<strong>设置 <code>consumer</code> 的 <code>consumeMessageBatchMaxSize</code> 参数</strong>，默认是 1，即一次只消费一条消息，例如设置为 N，那么每次消费的消息数小于等于 N。</p><h3 id="_3-跳过非重要消息" tabindex="-1"><a class="header-anchor" href="#_3-跳过非重要消息"><span>3. 跳过非重要消息</span></a></h3><p>发生消息堆积时，如果消费速度一直追不上发送速度，如果业务对数据要求不高的话，可以选择<strong>丢弃不重要的消息</strong>。例如，当某个队列的消息数堆积到 100000 条以上，则尝试丢弃部分或全部消息，这样就可以快速追上发送消息的速度。示例代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ConsumeConcurrentlyStatus </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">consumeMessage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            List</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MessageExt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> msgs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            ConsumeConcurrentlyContext context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    long</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> offset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> msgs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getQueueOffset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> maxOffset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            msgs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PROPERTY_MAX_OFFSET</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    long</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> diff</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Long</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">parseLong</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">maxOffset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> offset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">diff </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // TODO 消息堆积情况的特殊处理</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ConsumeConcurrentlyStatus</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CONSUME_SUCCESS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // TODO 正常消费过程</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ConsumeConcurrentlyStatus</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CONSUME_SUCCESS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-优化每条消息消费过程" tabindex="-1"><a class="header-anchor" href="#_4-优化每条消息消费过程"><span>4. 优化每条消息消费过程</span></a></h3><p>举例如下，某条消息的消费过程如下：</p><div class="vp-steps"><ol><li><p>根据消息从 DB 查询【数据 1】</p></li><li><p>根据消息从 DB 查询【数据 2】</p></li><li><p>复杂的业务计算</p></li><li><p>向 DB 插入【数据 3】</p></li><li><p>向 DB 插入【数据 4】</p></li></ol></div><p>这条消息的消费过程中有 4 次与 DB 的 交互，如果按照每次 5ms 计算，那么总共耗时 20ms，假设业务计算耗时 5ms，那么总过耗时 25ms，所以如果能 <strong>把 4 次 DB 交互优化为 2 次</strong> ，那么总耗时就可以优化到 15ms，即总体性能提高了 40%。</p><p>所以应用如果对时延敏感的话，可以把 DB 部署在 SSD 硬盘，相比于 SCSI 磁盘，前者的 RT 会小很多。</p>`,20)]))}const k=i(t,[["render",h]]),r=JSON.parse('{"path":"/knowledge/component/mq/mq-backlog/","title":"消息积压怎么办","lang":"zh-CN","frontmatter":{"title":"消息积压怎么办","icon":"tabler:message-dots","category":["开发工具"],"tag":["tools"],"createTime":"2025/04/21 17:28:06","permalink":"/knowledge/component/mq/mq-backlog/","description":"为什么会出现消息堆积？ 生产者的生产速度与消费者的速度不匹配。 如何解决？ 先定位消费慢的原因，如果是bug则处理bug；如果是本身消费能力较弱，优化小消费逻辑，比如之前是一条一条消费处理的，优化为批量处理；水平扩容，增加Topic队列数和消费者数。注意队列数一定要增加，不然新增加的消费者是没东西消费的。一个Topic中，一个队列只会分配给一个消费者。...","head":[["meta",{"property":"og:url","content":"https://liangxinglong-sudo.github.io/knowledge/component/mq/mq-backlog/"}],["meta",{"property":"og:site_name","content":"coder liang"}],["meta",{"property":"og:title","content":"消息积压怎么办"}],["meta",{"property":"og:description","content":"为什么会出现消息堆积？ 生产者的生产速度与消费者的速度不匹配。 如何解决？ 先定位消费慢的原因，如果是bug则处理bug；如果是本身消费能力较弱，优化小消费逻辑，比如之前是一条一条消费处理的，优化为批量处理；水平扩容，增加Topic队列数和消费者数。注意队列数一定要增加，不然新增加的消费者是没东西消费的。一个Topic中，一个队列只会分配给一个消费者。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"tools"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息积压怎么办\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":3.26,"words":978},"git":{},"autoDesc":true,"filePathRelative":"notes/knowledge/5.component/1.mq/5.mq-backlog.md"}');export{k as comp,r as data};
