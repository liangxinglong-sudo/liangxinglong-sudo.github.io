import{_ as l,c as d,d as e,a as r,e as s,b as n,w as a,r as h,o as p}from"./app-noM96vtB.js";const k={};function g(c,t){const i=h("Annotation");return p(),d("div",null,[t[9]||(t[9]=e("h2",{id:"事务的四大特性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#事务的四大特性"},[e("span",null,"事务的四大特性")])],-1)),e("p",null,[t[4]||(t[4]=s("事务是必须满足4个条件（ACID）：[A] 原子性 ")),n(i,{label:"Atomicity",total:1},{"item-0":a(()=>t[0]||(t[0]=[e("p",null,"Atomicity，或称不可分割性",-1)])),_:1}),t[5]||(t[5]=s(" 、[C] 一致性 ")),n(i,{label:"Consistency",total:1},{"item-0":a(()=>t[1]||(t[1]=[e("p",null,"Consistency",-1)])),_:1}),t[6]||(t[6]=s(" 、[I] 隔离性 ")),n(i,{label:"Isolation",total:1},{"item-0":a(()=>t[2]||(t[2]=[e("p",null,"Isolation，又称独立性",-1)])),_:1}),t[7]||(t[7]=s(" 、[D] 持久性 ")),n(i,{label:"Durability",total:1},{"item-0":a(()=>t[3]||(t[3]=[e("p",null,"Durability",-1)])),_:1}),t[8]||(t[8]=s(" 。"))]),t[10]||(t[10]=r(`<ul><li><p><strong>原子性</strong>：一个事务（<code>transaction</code>）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（<code>Rollback</code>）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></li><li><p><strong>一致性</strong>：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p></li><li><p><strong>隔离性</strong>：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（<code>Read uncommitted</code>）、读提交（<code>read committed</code>）、可重复读（<code>repeatable read</code>）和串行化（<code>Serializable</code>）。</p></li><li><p><strong>持久性</strong>：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p></li></ul><h2 id="事务控制语句" tabindex="-1"><a class="header-anchor" href="#事务控制语句"><span>事务控制语句</span></a></h2><p>使用 <code>BEGIN</code> 或 <code>START TRANSACTION</code> 显式地开启一个事务</p><ul><li><p><code>COMMIT</code>: 用于提交事务，将所有的修改永久保存到数据库</p></li><li><p><code>ROLLBACK</code>: 用于回滚事务，撤销自上次提交以来所做的所有更改</p></li><li><p><code>SAVEPOINT</code>: 用于在事务中设置保存点，以便稍后能够回滚到该点</p></li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SAVEPOINT savepoint_name;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>ROLLBACK TO SAVEPOINT</code>: 把事务回滚到标记点</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ROLLBACK</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TO</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SAVEPOINT savepoint_name;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>MySQL 事务例子：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 开始事务</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">START TRANSACTION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 执行一些SQL语句</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">UPDATE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> accounts </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> balance </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> balance </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user_id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">UPDATE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> accounts </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> balance </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> balance </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user_id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 判断是否要提交还是回滚</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">IF</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (条件) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">THEN</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    COMMIT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 提交事务</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ELSE</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    ROLLBACK</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 回滚事务</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">END</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> IF</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别"><span>事务隔离级别</span></a></h2><table><thead><tr><th>隔离级别</th><th style="text-align:center;">脏读(Dirty Read)</th><th style="text-align:center;">不可重复读 (Non Repeatable Read)</th><th style="text-align:center;">幻读(Phantom Read)</th></tr></thead><tbody><tr><td>读未提交</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td></tr><tr><td>读提交</td><td style="text-align:center;">❌</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td></tr><tr><td>可重复读</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td><td style="text-align:center;">✔️</td></tr><tr><td>串行化</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在MySQL中，如果使用InnoDB，默认的隔离级别是Repeatable Read</p></div><p>➡️ <strong>Read Uncommitted</strong></p><p><code>Read Uncommitted</code> 是隔离级别最低的一种事务级别。在这种隔离级别下，<strong>一个事务会读到另一个事务更新后但未提交的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据</strong>，这就是脏读（<code>Dirty Read</code>）</p><table><thead><tr><th style="text-align:center;">时刻</th><th style="text-align:center;">事务A</th><th style="text-align:center;">事务B</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td><td style="text-align:center;">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">BEGIN;</td><td style="text-align:center;">BEGIN;</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">UPDATE students SET name = &#39;Bob&#39; WHERE id = 1;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;"></td><td style="text-align:center;">SELECT * FROM students WHERE id = 1;</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">ROLLBACK;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;"></td><td style="text-align:center;">SELECT * FROM students WHERE id = 1;</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;"></td><td style="text-align:center;">COMMIT;</td></tr></tbody></table><p>当事务A执行完第3步时，它更新了id=1的记录，但并未提交，而事务B在第4步读取到的数据就是未提交的数据。</p><p>随后，事务A在第5步进行了回滚，事务B再次读取id=1的记录，发现和上一次读取到的数据不一致，这就是脏读。</p><p>➡️ <strong>Read Committed</strong></p><p>在<code>Read Committed</code>隔离级别下，一个事务不会读到另一个事务还没有提交的数据，但可能会遇到不可重复读（<code>Non Repeatable Read</code>）的问题。</p><p>不可重复读是指，<strong>在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致</strong>。</p><table><thead><tr><th style="text-align:center;">时刻</th><th style="text-align:center;">事务A</th><th style="text-align:center;">事务B</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td><td style="text-align:center;">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">BEGIN;</td><td style="text-align:center;">BEGIN;</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;"></td><td style="text-align:center;">SELECT * FROM students WHERE id = 1; -- Alice</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">UPDATE students SET name = &#39;Bob&#39; WHERE id = 1;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">COMMIT;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;"></td><td style="text-align:center;">SELECT * FROM students WHERE id = 1;-- Bob</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;"></td><td style="text-align:center;">COMMIT;</td></tr></tbody></table><p>当事务B第一次执行第3步的查询时，得到的结果是Alice，随后，由于事务A在第4步更新了这条记录并提交，</p><p>所以，事务B在第6步再次执行同样的查询时，得到的结果就变成了Bob，因此，在<code>Read Committed</code>隔离级别下，事务不可重复读同一条记录，因为很可能读到的结果不一致。</p><p>➡️ <strong>Repeatable Read</strong></p><p>在<code>Repeatable Read</code>隔离级别下，一个事务可能会遇到幻读（<code>Phantom Read</code>）的问题。</p><p>幻读是指，<strong>在一个事务中，第一次查询某条记录，发现没有，但是，当试图更新这条不存在的记录时，竟然能成功，并且，再次读取同一条记录，它就神奇地出现了</strong></p><table><thead><tr><th style="text-align:center;">时刻</th><th style="text-align:center;">事务A</th><th style="text-align:center;">事务B</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td><td style="text-align:center;">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">BEGIN;</td><td style="text-align:center;">BEGIN;</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;"></td><td style="text-align:center;">SELECT * FROM students WHERE id = 99; -- empty</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">INSERT INTO students (id, name) VALUES (99, &#39;Bob&#39;);</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">COMMIT;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;"></td><td style="text-align:center;">SELECT * FROM students WHERE id = 99; -- empty</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;"></td><td style="text-align:center;">UPDATE students SET name = &#39;Alice&#39; WHERE id = 99; -- 1 row affected</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;"></td><td style="text-align:center;">SELECT * FROM students WHERE id = 99; -- Alice</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;"></td><td style="text-align:center;">COMMIT;</td></tr></tbody></table><details class="hint-container details"><summary>看到这里纳闷了，怎么左边提交了 右边还是查不到</summary><p><strong>幻读的重点在于数据是否存在</strong>。原本不存在的数据却真实的存在了，这便是幻读。引起幻读的原因在于另一个事务进行了INSERT操作。</p><p>在可重复读隔离级别下，普通的查询是快照读，是不会看到别的事务插入的数据的。因此，幻读在 <strong>当前读</strong> 下才会出现。</p><p><strong>什么是快照读，什么是当前读？</strong></p><p>快照读读取的是<strong>快照数据</strong>。不加锁的简单的 SELECT都属于快照读，比如:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> player </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>当前读就是读取最新数据，而不是历史版本的数据</strong>。加锁的 SELECT，或者对数据进行增删改都会进行当前读。这有点像是 Java 中的 volatile 关键字，被 volatile 修饰的变量，进行修改时，JVM 会强制将其写回内存，而不是放在 CPU 缓存中，进行读取时，JVM 会强制从内存读取，而不是放在 CPU 缓存中。这样就能保证其可见行，保证每次读取到的都是最新的值。如果没有用 volatile 关键字修饰，变量的值可能会被放在 CPU 缓存中，这就导致读取到的值可能是某次修改的值，不能保证是最新的值。</p><p>如下的操作都会进行 当前读:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> player LOCK </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">IN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SHARE MODE;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> player </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FOR</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> UPDATE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">INSERT INTO</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> player </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">values</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DELETE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> player </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">UPDATE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> player </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,28))])}const y=l(k,[["render",g]]),E=JSON.parse('{"path":"/knowledge/dbs/transcation/","title":"数据库事务","lang":"zh-CN","frontmatter":{"title":"数据库事务","icon":"bitcoin-icons:transactions-filled","category":["数据库"],"tag":["事务"],"createTime":"2025/04/10 17:28:06","permalink":"/knowledge/dbs/transcation/","description":"事务的四大特性 事务是必须满足4个条件（ACID）：[A] 原子性 、[C] 一致性 、[I] 隔离性 、[D] 持久性 。 原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。 一致性：在...","head":[["meta",{"property":"og:url","content":"https://liangxinglong-sudo.github.io/knowledge/dbs/transcation/"}],["meta",{"property":"og:site_name","content":"coder liang"}],["meta",{"property":"og:title","content":"数据库事务"}],["meta",{"property":"og:description","content":"事务的四大特性 事务是必须满足4个条件（ACID）：[A] 原子性 、[C] 一致性 、[I] 隔离性 、[D] 持久性 。 原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。 一致性：在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"事务"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":5.58,"words":1673},"git":{},"autoDesc":true,"filePathRelative":"notes/knowledge/4.dbs/6.transcation.md"}');export{y as comp,E as data};
